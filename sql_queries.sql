CREATE TABLE sales
(
ORDER_ID VARCHAR(20),
PRODUCT VARCHAR(50),
QUANTITY_ORDERED INT,
PRICE_EACH double,
ORDER_DATE VARCHAR(50),
PURCHASE_ADD VARCHAR(255),
ADDRESS VARCHAR(255)
);

LOAD DATA LOCAL INFILE 'C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/electronics_sales.csv'
INTO TABLE sales
FIELDS TERMINATED BY ','  
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\r\n'
IGNORE 1 ROWS;

SELECT * FROM electronics_sales.sales;

SELECT COUNT(*) FROM SALES;

-- DELETE BLANKS 
DELETE FROM SALES WHERE ORDER_ID = '';

SELECT COUNT(*) FROM SALES WHERE ORDER_ID = '';

-- SELECT AND DELETE ROWS WITH COLUMN NAME
SELECT * FROM SALES WHERE PRODUCT = 'PRODUCT';
DELETE FROM SALES WHERE PRODUCT = 'PRODUCT';

-- CREATE A NEW COLUMN FOR TOTAL SALE
ALTER TABLE SALES ADD COLUMN TOTAL_SALE DOUBLE AFTER PRICE_EACH;
 
UPDATE SALES SET TOTAL_SALE = QUANTITY_ORDERED * PRICE_EACH;

ALTER TABLE SALES RENAME COLUMN TOTAL_SALE TO TOTAL_PRICE;

-- CREATING A NEW COLUMN FOR DATE TO CONVERT DATE STRING TO DATE
ALTER TABLE SALES ADD COLUMN ORD_DATE DATETIME;

UPDATE SALES
SET ORD_DATE = 
CASE
	WHEN ORDER_DATE LIKE '%/%/%' THEN STR_TO_DATE(ORDER_DATE,'%m/%d/%y %H:%i')
    WHEN ORDER_DATE LIKE '%-%-%' THEN STR_TO_DATE(ORDER_DATE,'%m-%d-%Y %H:%i')
    ELSE NULL
END;

-- NEW COLUMN FOR YEAR, MONTH, TIME
ALTER TABLE SALES
ADD COLUMN(
`YEAR` INT,
`MONTH` VARCHAR(10),
`TIME` TIME
);

UPDATE SALES
SET 
`YEAR` = YEAR(ORD_DATE),
`MONTH` = MONTH(ORD_DATE),
`TIME` = DATE_FORMAT(ORD_DATE,'%H:%i');

-- NEW COLUMN FOR CITY FROM ADDRESS
ALTER TABLE SALES
ADD COLUMN CITY VARCHAR(15);

SELECT PURCHASE_ADD, 
SUBSTRING_INDEX(SUBSTRING_INDEX(PURCHASE_ADD, ',', 2), ',', -1) AS CITY
FROM SALES;

UPDATE SALES
SET CITY = SUBSTRING_INDEX(SUBSTRING_INDEX(PURCHASE_ADD, ',', 2), ',', -1);

-- DELETE UNWANTED COLUMNS
ALTER TABLE SALES
DROP COLUMN ORDER_DATE;

-- CHECK FOR DUPLICATES AND REMOVE THEM
-- BACKUP CREATED
CREATE TEMPORARY TABLE SALES_TEM AS
SELECT *,
ROW_NUMBER() OVER(PARTITION BY ORDER_ID, product, quantity_ordered, price_each,
total_price, ord_date, purchase_add) AS ROW_NO
FROM SALES;

DELETE FROM SALES;

INSERT INTO SALES
SELECT ORDER_ID, PRODUCT, QUANTITY_ORDERED, PRICE_EACH, TOTAL_PRICE,
ORD_DATE, `YEAR`, `MONTH`, `TIME`, PURCHASE_ADD, CITY FROM SALES_TEM
WHERE ROW_NO = 1;

SELECT SAL1.ORDER_ID, SAL1.PRODUCT, SAL2.PRODUCT
FROM SALES SAL1
JOIN SALES SAL2
ON SAL1.ORDER_ID = SAL2.ORDER_ID AND SAL1.PRODUCT > SAL2.PRODUCT;